prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix bf: <http://id.loc.gov/ontologies/bibframe/>
prefix kbv: <https://id.lkd.local/vocab/>
prefix sdo: <http://schema.org/>

construct {

    ?kbvterm a ?type ;
        ?maplink ?bfterm ;
        rdfs:label ?kbvlabel_en ;
        rdfs:subClassOf ?kbvbaseclass ;
        rdfs:domain ?kbvdomain ;
        sdo:domainIncludes ?kbvdomainincludes ;
        rdfs:range ?kbvrange ;
        sdo:rangeIncludes ?kbvrangeincludes ;
        rdfs:isDefinedBy kbv: .

} where {

    # General

    ?bfterm a ?type .
    filter ((?bfterm != bf:) && strstarts(str(?bfterm), str(bf:)))
    ?bfterm rdfs:label ?bflabel .

    bind(if(?type = owl:Class, owl:equivalentClass, owl:equivalentProperty) as ?maplink)

    optional {
        ?mappedterm ?maplink ?bfterm
        optional {
            ?mappedterm rdfs:label ?mappedlabel .
            filter(langMatches(?mappedlabel, 'en'))
        }
    }

    bind(coalesce(?mappedterm,
                IRI(concat(replace(str(?bfterm), str(bf:), str(kbv:)))))
            as ?kbvterm)

    bind(coalesce(?mappedlabel, strlang(?bflabel, 'en')) as ?kbvlabel_en)


    # Class

    optional {
        ?bfterm rdfs:subClassOf ?baseclass .

        optional { ?mappedclass owl:equivalentClass ?baseclass }

        bind(coalesce(?mappedclass,
                    IRI(concat(replace(str(?baseclass), str(bf:), str(kbv:)))))
                as ?kbvbaseclass)
    }


    # Property

    # map domain
    optional {
        ?bfterm rdfs:domain ?domain
        optional { ?mappeddomain owl:equivalentClass ?domain }

        bind(coalesce(?mappeddomain,
                    IRI(concat(replace(str(?domain), str(bf:), str(kbv:)))))
                as ?kbvdomain)
    }
    optional {
        filter not exists { ?kbvterm rdfs:domain [] }
        filter exists { ?bfterm rdfs:comment "Used with Work, Instance or Item" }
        bind(kbv:Endeavour as ?kbvdomain)
    }
    optional {
        filter not exists { ?kbvterm rdfs:domain [] }
        filter exists { ?bfterm rdfs:comment "Used with Work or Instance" }
        bind(kbv:Creation as ?kbvdomain)
    }

    optional {
        filter not exists { ?kbvterm rdfs:domain [] }
        filter exists { ?bfterm rdfs:comment "Used with Unspecified" }
        bind(rdfs:Resource as ?kbvdomain)
    }
    # map domainIncludes
    optional {
        filter not exists { ?kbvterm rdfs:domain [] }
        filter exists { ?bfterm rdfs:comment "Suggested use - With Work, Instance or Item" }
        bind(kbv:Endeavour as ?kbvdomainincludes)
    }
    optional {
        filter not exists { ?kbvterm rdfs:domain [] }
        filter exists { ?bfterm rdfs:comment "Suggested use - With Work or Instance" }
        bind(kbv:Creation as ?kbvdomainincludes)
    }
    # map range
    optional {
        ?bfterm rdfs:range ?range
        optional { ?mappedrange owl:equivalentClass ?range }
        bind(coalesce(?mappedrange,
                    IRI(concat(replace(str(?range), str(bf:), str(kbv:)))))
                as ?kbvrange)
    }
    optional {
        filter not exists { ?kbvterm rdfs:range [] }
        filter exists { ?bfterm rdfs:comment "Expected value Work, Instance or Item" }
        bind(kbv:Endeavour as ?kbvrange)
    }
    optional {
        filter not exists { ?kbvterm rdfs:range [] }
        filter exists { ?bfterm rdfs:comment "Expected value Work or Instance" }
        bind(kbv:Creation as ?kbvrange)
    }
    # map rangeIncludes
    optional {
        filter not exists { ?kbvterm rdfs:range [] }
        filter exists { ?bfterm rdfs:comment "Suggested value - Work, Instance or Item" }
        bind(kbv:Endeavour as ?kbvrangeincludes)
    }
    optional {
        filter not exists { ?kbvterm rdfs:range [] }
        filter exists { ?bfterm rdfs:comment "Suggested value - Work or Instance" }
        bind(kbv:Creation as ?kbvrangeincludes)
    }
}
