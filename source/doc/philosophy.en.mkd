Philosophy
==========================================

## Requirements

An effective vocabulary is used to capture distinct and commonly understood information about distinct and commonly understood (types of) things.

Determining distinctness and understandability is a hard problem, commonly approached haphazardly [TODO: reference, to e.g. committee work without follow-up on use cases and requirements]. At least, it is often approached without taking multiple perspectives into account, both broad and narrow.

To measure this, existing practise and needs have to be understood, and that understanding used to measure the effect of proposed pieces of description. It helps to focus on what is *really* sought after (such as the title of one of several variations of a conceptually distinct piece of content), rather than particular forms of description (e.g. "using MARC21 notation, type 246 and then supply pieces under a for the main title, b for the remainder, and so on"). To correlate with existing vocaburies (and abstract reference models) is also important (at least as long as these themselves represent a viable effort taking the above considerations into account).

To not get caught up in this indefinitely, it helps to understand that there is no "correct" form of description. There are more or less effective ways to convey the necessary information for a given set of purposes. Compare this to the drawing of maps. No one would expect a coast line to be drawn to an accuracy under a certain resolution threshold. At the same time, we would expect to be able to trace the route from A to B and clearly see that they are separated by a bay or a river.

Rich information can be useful to a point, but can obscure the simple core. A simplistic or naive description can miss the point entirely, if distinct differences are required to differentiate between similar items.

A method for eliminating unnecessary (or hard-to-grasp) differences is key. A point of difference need to be clearly described and documented for it to be upheld in practise, when the description is created or used.

## Stuff To Include

It is folly to fully categorize these notions. Some are fleeting, and many overlap. No matter the psychological or philosophical stance, that work will never end. *Nevertheless, it helps to understand that. To avoid getting stuck in either ignorant choices or overthought designs.*

Artefacts: artefacts of various forms and material
Cultural: genres, natures, content
Temporal: events, provisioning, revisions
Social: names, agents, languages, countries, nationalities

Build a class hierarchy to explicitly reflect the chosen structure (using multiple inheritance if necessary). Mark certain classes as abstract and/or "top concepts", to use as starting points for listing/navigation, and for avoiding selection in creation of new descriptions.

When determining their merits and applicability, we need to consider a number of questions. What are they used for? By whom? Where do they originate? How are they maintained? How do they correlate?

#### Choice Guided By Usage

Any given slicing is an approximation and contextually dependent. Is the "core" type to partition on limited to: a) WEMI-level? B) content/media/carrier? C) Only Text, or Novel/Article/...? Put non-"core" in other prop? Like additionalType, genre? In principle: use a type if it brings possible new properties with it, or functions as a common significant distinguisher.

May need a backing "exploded" model for weird MARC where folding isn't possible (multiple carriers, oddly repeated 006...). Don't put all format notes from fields into "hasFormat", but rather distinguish "extentNote" etc, and then fold all if there's not more than one of each...

#### Levels of Ambition (Deciding the Domain)

How much of old/existing nomenclature/practise is preserved and discarded, respectively? (E.g. 100, 700, ...)

How is that measured? By ability to convert MARC? Ability to fit other data into the same output (DC, MODS, BIBO, ONIX, Schema.org)? Ability to re-convert ("revert") to MARC? Ability to use in new kinds of interfaces for editing, searching/browsing/filtering/clustering?

Test in implementation, applied usage, data flow scenarios, and reiterate as needed.

